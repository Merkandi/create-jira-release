name: "Jira Release Web Hook v2"
description: "Creates a new Jira release and assigns all relevant issues to it."

inputs:
  jira-project-key:
    description: "Jira project identifier v2"
    required: true
  jira-automation-webhook:
    description: "Jira automation webhook URL"
    required: true
  jira-webhook-token:
    description: "Secret token for Jira Automation webhook (X-Automation-Webhook-Token)"
    required: true
  build-version:
    description: "Version identifier"
    required: true

runs:
  using: "composite"
  steps:
    - name: Fetch entire Git history (including tags)
      run: |
        if [ "$(git rev-parse --is-shallow-repository)" = "true" ]; then
          git fetch --prune --unshallow
        fi
        git fetch --prune --tags
      shell: bash

    - name: Collect issue numbers since last release/tag
      run: |
        export LC_ALL=en_US.utf8
        git log $(git describe --abbrev=0 --tags 2> /dev/null || git rev-list --max-parents=0 HEAD)..HEAD | \
          grep -oE "${{ inputs.jira-project-key }}-[[:digit:]]{1,}" | sort | uniq | \
          sed 's/^\|$/"/g' | paste -sd , - | awk '{print "RELATED_JIRA_ISSUES="$0}' >> $GITHUB_ENV
      shell: bash

    - name: Create json and invoke webhook with token
      run: |
        $json = ConvertTo-Json @{
          issues = @(${{ env.RELATED_JIRA_ISSUES }});
          data = @{
            version = "${{ inputs.build-version }}";
            projectName = "${{ inputs.jira-project-key }}"
          }
        }

        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

        Invoke-RestMethod -Uri "${{ inputs.jira-automation-webhook }}" `
                          -Method Post `
                          -Headers @{ "X-Automation-Webhook-Token" = "${{ inputs.jira-webhook-token }}" } `
                          -Body $json `
                          -ContentType "application/json"
      shell: pwsh
